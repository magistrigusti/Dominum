// models/ResourceNodeModel.ts
import mongoose from "mongoose";

// –ú–æ–¥–µ–ª—å —Ä–µ—Å—É—Ä—Å–Ω–æ–π —Ç–æ—á–∫–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ
const ResourceNodeSchema = new mongoose.Schema({
  owner: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true }, // üëà –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
  resource: { type: String, required: true },      // –¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞ (wood, stone –∏ —Ç.–¥.)
  level: { type: Number, default: 1 },             // –£—Ä–æ–≤–µ–Ω—å —Ç–æ—á–∫–∏
  position: {                                      // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏
    x: { type: Number, required: true },
    y: { type: Number, required: true }
  },
  totalAmount: { type: Number, required: true },   // –í—Å–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞
  currentAmount: { type: Number, required: true }, // –û—Å—Ç–∞—Ç–æ–∫
  isDepleted: { type: Boolean, default: false },   // –ò—Å—Ç–æ—â–µ–Ω–∞ –ª–∏ —Ç–æ—á–∫–∞
  activeMission: { type: mongoose.Schema.Types.ObjectId, ref: "Mission" }, // –ê–∫—Ç–∏–≤–Ω–∞—è –º–∏—Å—Å–∏—è –Ω–∞ —Ç–æ—á–∫–µ
  activeHero: { type: mongoose.Schema.Types.ObjectId, ref: "Hero" }, // –ì–µ—Ä–æ–π, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±—ã–≤–∞–µ—Ç
  avatar: { type: String, default: "" },           // –ò–∫–æ–Ω–∫–∞ —Ç–æ—á–∫–∏
  quality: { type: String, default: "common" },    // –ö–∞—á–µ—Å—Ç–≤–æ (common, rare, epic)
  cooldownEnd: { type: Date },                     // –í—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –æ—Ç–∫–∞—Ç–∞
  bonusMultiplier: { type: Number, default: 1 },   // –ë–æ–Ω—É—Å—ã –∫ —Å–±–æ—Ä—É
  islandType: { type: String, default: "standard" }, // –¢–∏–ø –æ—Å—Ç—Ä–æ–≤–∞
  createdAt: { type: Date, default: Date.now },    // –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  lastMiningTime: { type: Number },
  autoRestore: { type: Boolean, default: true },
  restoreSpeed: { type: Number, default: 0 }
}, { timestamps: true });

export default mongoose.models.ResourceNode || mongoose.model("ResourceNode", ResourceNodeSchema);