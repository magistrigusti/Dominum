// üìÑ src/services/armyService.ts

import ArmyModel from '@/models/ArmyModel';
import HeroModel from '@/models/HeroModel';
import UserModel from '@/models/UserModel';

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å—é –∞—Ä–º–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getUserArmy(wallet: string) {
  const user = await UserModel.findOne({ wallet });
  if (!user) throw new Error('User not found');
  return await ArmyModel.find({ owner: user._id });
}

// –ù–∞–∑–Ω–∞—á–∏—Ç—å —é–Ω–∏—Ç–æ–≤ –≥–µ—Ä–æ—é
export async function assignArmyToHero(wallet: string, heroId: string, units: any) {
  const user = await UserModel.findOne({ wallet });
  if (!user) throw new Error('User not found');
  const hero = await HeroModel.findOne({ _id: heroId, owner: user._id });
  if (!hero) throw new Error('Hero not found');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤ —É –∏–≥—Ä–æ–∫–∞ (availableArmy)
  const availableArmy = await ArmyModel.findOne({ owner: user._id, type: 'available' });
  for (const unitType in units) {
    if (units[unitType] > (availableArmy.units[unitType] || 0)) {
      throw new Error(`Not enough units of type ${unitType}`);
    }
  }

  // –°–ø–∏—Å—ã–≤–∞–µ–º –∏–∑ availableArmy, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ heroArmy
  for (const unitType in units) {
    availableArmy.units[unitType] -= units[unitType];
    hero.heroArmy = hero.heroArmy || {};
    hero.heroArmy[unitType] = (hero.heroArmy[unitType] || 0) + units[unitType];
  }
  await availableArmy.save();
  await hero.save();
  return { heroArmy: hero.heroArmy, availableArmy: availableArmy.units };
}

// –û—Ç–æ–∑–≤–∞—Ç—å —é–Ω–∏—Ç–æ–≤ —Å –≥–µ—Ä–æ—è –æ–±—Ä–∞—Ç–Ω–æ –≤ availableArmy
export async function unassignArmyFromHero(wallet: string, heroId: string) {
  const user = await UserModel.findOne({ wallet });
  if (!user) throw new Error('User not found');
  const hero = await HeroModel.findOne({ _id: heroId, owner: user._id });
  if (!hero) throw new Error('Hero not found');

  const availableArmy = await ArmyModel.findOne({ owner: user._id, type: 'available' });
  if (hero.heroArmy) {
    for (const unitType in hero.heroArmy) {
      availableArmy.units[unitType] = (availableArmy.units[unitType] || 0) + hero.heroArmy[unitType];
    }
    hero.heroArmy = {};
    await availableArmy.save();
    await hero.save();
  }
  return { heroArmy: hero.heroArmy, availableArmy: availableArmy.units };
}
