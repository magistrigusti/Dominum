// üìÑ src/services/missionService.ts

import MissionModel from '@/models/MissionModel';
import UserModel from '@/models/UserModel';
import HeroModel from '@/models/HeroModel';
import ArmyModel from '@/models/ArmyModel';

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–∏—Å—Å–∏–∏ –∏–≥—Ä–æ–∫–∞
export async function getUserMissions(wallet: string) {
  const user = await UserModel.findOne({ wallet });
  if (!user) throw new Error('User not found');
  return await MissionModel.find({ owner: user._id });
}

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏—Å—Å–∏—é (–¥–æ–±—ã—á–∞, –±–∏—Ç–≤–∞)
export async function createMission(wallet: string, missionData: any) {
  const user = await UserModel.findOne({ address: wallet });
  if (!user) throw new Error('User not found');

  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –≥–µ—Ä–æ–π, –Ω–µ—Ç –ª–∏ —É –Ω–µ–≥–æ —É–∂–µ –º–∏—Å—Å–∏–∏ –∏ —Ç.–¥.

  const mission = new MissionModel({
    ...missionData,
    owner: user._id,
    status: 'active',
    createdAt: new Date(),
  });
  await mission.save();
  return mission.toObject();
}

// –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∏—Å—Å–∏—é, –Ω–∞—á–∏—Å–ª–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å –≥–µ—Ä–æ—è/–∞—Ä–º–∏—é
export async function completeMission(wallet: string, missionId: string) {
  const user = await UserModel.findOne({ address: wallet });
  if (!user) throw new Error('User not found');
  const mission = await MissionModel.findOne({ _id: missionId, owner: user._id });
  if (!mission || mission.status !== 'active') throw new Error('Mission not active');
  // –¢—É—Ç ‚Äî —Ä–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã, —Ä–µ—Å—É—Ä—Å–æ–≤, –æ–ø—ã—Ç–∞
  mission.status = 'completed';
  mission.completedAt = new Date();
  await mission.save();
  // –ú–æ–∂–Ω–æ –Ω–∞—á–∏—Å–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã, –æ–ø—ã—Ç, –≤–µ—Ä–Ω—É—Ç—å –≥–µ—Ä–æ—è –∏ –∞—Ä–º–∏—é (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  return mission.toObject();
}

// –û—Ç–º–µ–Ω–∏—Ç—å –º–∏—Å—Å–∏—é ‚Äî –≤–µ—Ä–Ω—É—Ç—å –≥–µ—Ä–æ—è –∏ –∞—Ä–º–∏—é (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
export async function cancelMission(wallet: string, missionId: string) {
  const user = await UserModel.findOne({ address: wallet });
  if (!user) throw new Error('User not found');
  const mission = await MissionModel.findOne({ _id: missionId, owner: user._id });
  if (!mission || mission.status !== 'active') throw new Error('Mission not active');
  // –õ–æ–≥–∏–∫–∞: –≤–æ–∑–º–æ–∂–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å —á–∞—Å—Ç—å —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–ª–∏ –æ–ø—ã—Ç–∞, –∫–∞–∫ —à—Ç—Ä–∞—Ñ
  mission.status = 'cancelled';
  mission.cancelledAt = new Date();
  await mission.save();
  // –í–µ—Ä–Ω—É—Ç—å –≥–µ—Ä–æ—è/–∞—Ä–º–∏—é (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  return mission.toObject();
}
