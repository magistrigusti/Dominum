// üìÑ src/services/astralService.ts
import { AstralMap, AstralIsland } from "@/types/AstralMap";
import { ResourceNode } from "@/types/Resource";

// –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –º–µ–∂–¥—É –∫—Ä–∏—Å—Ç–∞–ª–ª–∞–º–∏
const MIN_ASTRAL_CRYSTAL_DISTANCE = 10; // —É—Å–ª–æ–≤–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞

function distance(a: { x: number, y: number }, b: { x: number, y: number }) {
  return Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2);
}

export function respawnAstralCrystal(
  islands: AstralIsland[],
  resourceNodes: ResourceNode[]
) {
  // 1. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫—Ä–∏—Å—Ç–∞–ª–ª (–µ—Å–ª–∏ –Ω–∞–¥–æ)
  const nodesWithoutCrystal = resourceNodes.filter(n => n.resource !== "astral_crystal");

  // 2. –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –æ—Å—Ç—Ä–æ–≤–∞ –±–µ–∑ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
  const candidateIslands = islands.filter(island => {
    // –£–∂–µ –µ—Å—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª –Ω–∞ —ç—Ç–æ–º –æ—Å—Ç—Ä–æ–≤–µ?
    const hasCrystal = island.resourceNodes.some(id =>
      resourceNodes.some(rn => rn._id === id && rn.resource === "astral_crystal")
    );
    return !hasCrystal;
  });

  // 3. –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –æ—Å—Ç—Ä–æ–≤ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–º–Ω—É—é –ª–æ–≥–∏–∫—É)
  if (!candidateIslands.length) return; // –Ω–µ—Ç –∫—É–¥–∞ —Å—Ç–∞–≤–∏—Ç—å
  const idx = Math.floor(Math.random() * candidateIslands.length);
  const island = candidateIslands[idx];

  // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É –∫—Ä–∏—Å—Ç–∞–ª–ª–∞ –Ω–∞ —ç—Ç–æ–º –æ—Å—Ç—Ä–æ–≤–µ
  const newNode: ResourceNode = {
    _id: generateUniqueId(),
    resource: "astral_crystal",
    level: 1,
    position: { x: island.x, y: island.y }, // –º–æ–∂–Ω–æ —Ä–∞–Ω–¥–æ–º–Ω–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Å—Ç—Ä–æ–≤–∞
    totalAmount: 1,
    currentAmount: 1,
    isDepleted: false,
    autoRestore: false,
    // ---- –î–û–ë–ê–í–¨ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø ----
    quality: "common", // –∏–ª–∏ –¥—Ä—É–≥–æ–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    lastMiningTime: 0, // –∏–ª–∏ null, –µ—Å–ª–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç–∏–ø
    // –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –≤ —Ç–∏–ø–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!
  };

  // –î–æ–±–∞–≤–ª—è–µ–º id –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏ –≤ –æ—Å—Ç—Ä–æ–≤
  island.resourceNodes.push(newNode._id);
  resourceNodes.push(newNode);

  // –ú–æ–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –æ—Å—Ç—Ä–æ–≤–∞/—Ä–µ—Å—É—Ä—Å—ã
  return { islands, resourceNodes };
}

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö id (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ nanoid)
function generateUniqueId() {
  return Math.random().toString(36).substr(2, 9);
}
