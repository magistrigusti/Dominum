// üìÑ src/app/api/user/update/route.ts

import { NextResponse } from "next/server";
import dbConnect from "@/lib/dbConnect";
import UserModel from "@/models/UserModel";
import { ARMY_STATS, ArmyUnitType } from "@/config/army/ARMY_STATS"; // –ø—É—Ç—å –∏—Å–ø—Ä–∞–≤—å –µ—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
import { Mission } from "@/types/Mission"; // –µ—Å–ª–∏ –Ω–∞–¥–æ –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏

export async function PUT(req: Request) {
  const { address, army, heroArmy, missions, resources, cancelMissionId, updateHero, ...data } = await req.json();

  if (!address) {
    return NextResponse.json({ error: "Address is required" }, { status: 400 });
  }

  try {
    await dbConnect();
    const user = await UserModel.findOne({ address });

    if (!user) {
      return NextResponse.json({ error: "User not found" }, { status: 404 });
    }

    // –°–±–æ—Ä–∫–∞ –∞–ø–¥–µ–π—Ç–æ–≤
    const setFields: any = {};
    const incFields: any = {};

    // === 1. –ê—Ä–º–∏—è (–µ—Å–ª–∏ –Ω–∞–¥–æ —É–º–µ–Ω—å—à–∏—Ç—å –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å ‚Äî –ø–æ –º–∞—Å—Å–∏–≤—É –∏–ª–∏ –æ–±—ä–µ–∫—Ç—É)
    if (army) {
      // –ï—Å–ª–∏ —É —Ç–µ–±—è army ‚Äî –æ–±—ä–µ–∫—Ç: { peasant: { level, count }, ... }
      setFields.army = army;
      // –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ ‚Äî —Ç—É—Ç –Ω—É–∂–Ω–∞ –¥—Ä—É–≥–∞—è –ª–æ–≥–∏–∫–∞ (–æ–±–Ω–æ–≤–∏ –µ—Å–ª–∏ –Ω–∞–¥–æ)
    }

    // === 2. heroArmy (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å/—Å–±—Ä–æ—Å–∏—Ç—å —É –≥–µ—Ä–æ—è)
    if (heroArmy && Array.isArray(heroArmy) && data.heroId) {
      // –ù–∞–π—Ç–∏ –≥–µ—Ä–æ—è –∏ –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ heroArmy
      const heroIndex = user.heroes.findIndex((h: any) => h._id == data.heroId);
      if (heroIndex !== -1) {
        user.heroes[heroIndex].heroArmy = heroArmy;
        setFields.heroes = user.heroes;
      }
    }

    // === 3. –ú–∏—Å—Å–∏–∏ (–¥–æ–±–∞–≤–∏—Ç—å, —É–¥–∞–ª–∏—Ç—å, –æ–±–Ω–æ–≤–∏—Ç—å)
    if (missions) {
      setFields.missions = missions;
    }

    // === 4. –†–µ—Å—É—Ä—Å—ã (ResourceSub –∫–∞–∫ –æ–±—ä–µ–∫—Ç)
    if (resources) {
      setFields.resources = { ...user.resources, ...resources };
    }

    // === 5. –û—Ç–º–µ–Ω–∞ –º–∏—Å—Å–∏–∏ (–≤–æ–∑–≤—Ä–∞—Ç –∞—Ä–º–∏–∏/–≥–µ—Ä–æ—è/—Ä–µ—Å—É—Ä—Å–æ–≤)
    if (cancelMissionId) {
      const mission = user.missions.find((m: any) => m._id == cancelMissionId);
      if (mission) {
        // –í–µ—Ä–Ω—É—Ç—å –≥–µ—Ä–æ—è –∏ –∞—Ä–º–∏—é (–ø—Ä–∏–º–µ—Ä–Ω–æ ‚Äî –∞–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —Ç–≤–æ–π —Ç–∏–ø)
        if (mission.hero && mission.heroArmy) {
          // –í–µ—Ä–Ω—É—Ç—å –≥–µ—Ä–æ—è –≤ –¥–æ—Å—Ç—É–ø–Ω—ã–µ (status = idle, —É–±–∏—Ä–∞–µ–º currentMission)
          const heroIdx = user.heroes.findIndex((h: any) => h._id == mission.hero);
          if (heroIdx !== -1) {
            user.heroes[heroIdx].status = "idle";
            user.heroes[heroIdx].currentMission = null;
          }
          setFields.heroes = user.heroes;

          // –í–µ—Ä–Ω—É—Ç—å –∞—Ä–º–∏—é (—É–≤–µ–ª–∏—á–∏—Ç—å user.army –ø–æ —Ç–∏–ø—É)
          for (const unit of mission.heroArmy) {
            if (!user.army[unit.unitType]) user.army[unit.unitType] = { level: unit.level, count: 0 };
            user.army[unit.unitType].count += unit.count;
          }
          setFields.army = user.army;
        }

        // –í—ã–¥–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã, –µ—Å–ª–∏ –º–∏—Å—Å–∏—è —á–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        if (mission.reward && mission.reward.resources) {
          for (const [res, value] of Object.entries(mission.reward.resources)) {
            user.resources[res] = (user.resources[res] || 0) + (value as number);
          }
          setFields.resources = user.resources;
        }

        // –£–¥–∞–ª–∏—Ç—å –º–∏—Å—Å–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞
        user.missions = user.missions.filter((m: any) => m._id != cancelMissionId);
        setFields.missions = user.missions;
      }
    }

    // === 6. –û–±–Ω–æ–≤–∏—Ç—å –≥–µ—Ä–æ—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, xp, level, —Å—Ç–∞—Ç—ã)
    if (updateHero && updateHero.heroId) {
      const heroIdx = user.heroes.findIndex((h: any) => h._id == updateHero.heroId);
      if (heroIdx !== -1) {
        user.heroes[heroIdx] = {
          ...user.heroes[heroIdx],
          ...updateHero.fields
        };
        setFields.heroes = user.heroes;
      }
    }

    // === 7. –õ—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ allowedFields
    const allowedFields = [
      "name",
      "avatar",
      "prestige",
      "levelPrestige",
      "prestigeProgress",
      "technologies",
      "activeBonuses",
      "activeQuest",
      "questPanelOpen",
      "activeMining",
      "resourceNodes"
    ];
    for (const key of allowedFields) {
      if (data[key] !== undefined) {
        setFields[key] = data[key];
      }
    }

    // --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è ---
    await UserModel.updateOne(
      { address },
      {
        ...(Object.keys(setFields).length > 0 && { $set: setFields }),
        ...(Object.keys(incFields).length > 0 && { $inc: incFields }),
      }
    );

    // --- –û—Ç–¥–∞—ë–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    const updatedUser = await UserModel.findOne({ address });
    return NextResponse.json(updatedUser);

  } catch (err) {
    console.error("[api/user/update] ‚ùå –û—à–∏–±–∫–∞:", err);
    return NextResponse.json({ error: "Server error", details: String(err) }, { status: 500 });
  }
}
