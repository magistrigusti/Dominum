// üìÑ src/app/api/user/route.ts
import { NextResponse } from 'next/server';
import dbConnect from '@/lib/dbConnect';
import UserModel from '@/models/UserModel';
import { updateResourceNodesIfNeeded } from '@/utils/updateResourceNodes';
import { RESOURCE_CONFIG } from '@/config/resource/RESOURCE_CONFIG';
import { generateDefaultArmy } from '@/config/army/ARMY_CONFIG'; // –µ—Å–ª–∏ –Ω–∞–¥–æ

export async function POST(req: Request) {
  try {
    const { address } = await req.json();

    if (!address) {
      return NextResponse.json({ error: 'Address is required' }, { status: 400 });
    }

    await dbConnect();

    let user = await UserModel.findOne({ address })
      .populate('heroes')
      .populate('missions')
      .populate('ships')
      .populate('resourceNodes');

    if (!user) {
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ –≤—Å–µ–º–∏ –Ω—É–∂–Ω—ã–º–∏ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏!
      user = await UserModel.create({
        address,
        avatar: '/icons/user-icon.png',
        name: '–ö–∞–ø–∏—Ç–∞–Ω',
        prestige: 100,
        levelPrestige: 0,
        prestigeProgress: 0,
        technologies: null,
        questShipRepaired: false,
        resources: {
          food: 0, wood: 0, stone: 0, iron: 0, gold: 0, doubloon: 0,
          pearl: 0, astral_crystal: 0, allodium: 0,
        },
        army: generateDefaultArmy(), // —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –º–∞—Å—Å–∏–≤ army
        heroes: [],
        missions: [],
        ships: [],
        resourceNodes: [],
      });
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.address);
    }

    // ‚ö°Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –º–∏—Å—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≤–µ—Ä—à—ë–Ω —Å–±–æ—Ä, –≥–µ—Ä–æ–π —É—à—ë–ª, –∏ —Ç.–¥.)
    if (user.activeMining) {
      const now = Date.now();
      const start = new Date(user.activeMining.startedAt).getTime();
      const end = start + user.activeMining.duration * 1000;
      if (now >= end) {
        // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–æ–±—ã—á—É ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!
        const gained = user.activeMining.remaining || 0;
        const resKey = user.activeMining.resource;
        if (typeof user.resources[resKey] === 'number') {
          user.resources[resKey] += gained;
        }
        // –£–±–∏—Ä–∞–µ–º –º–∏—Å—Å–∏—é –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        user.missions = user.missions.filter((m: any) => m.heroId !== user.activeMining.heroId);
        user.activeMining = null;
      }
    }

    // üõ† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–Ω—ã—Ö —Ç–æ—á–µ–∫ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    await updateResourceNodesIfNeeded(user);

    // üñº –î–æ–±–∞–≤–ª—è–µ–º avatar –∫ –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–µ
    if (user.resourceNodes && Array.isArray(user.resourceNodes)) {
      for (const node of user.resourceNodes) {
        const meta = RESOURCE_CONFIG.find(r => r.key === node.resource);
        node.avatar = meta?.avatar || '/icons/resources/default.png';
      }
    }

    await user.save();

    return NextResponse.json({
      address: user.address,
      avatar: user.avatar,
      name: user.name,
      prestige: user.prestige,
      levelPrestige: user.levelPrestige,
      prestigeProgress: user.prestigeProgress,
      technologies: user.technologies,
      questShipRepaired: user.questShipRepaired,
      resources: user.resources,
      reward: user.reward,
      army: user.army,
      heroes: user.heroes,
      missions: user.missions,
      ships: user.ships,
      resourceNodes: user.resourceNodes,
      activeMining: user.activeMining,
      activeQuest: user.activeQuest,
      createdAt: user.createdAt,
      updatedAt: user.updatedAt,
    });

  } catch (err) {
    console.error('‚ùå [POST /api/user] Server error:', err);
    return NextResponse.json({ error: 'Server error', details: String(err) }, { status: 500 });
  }
}
