// üìÑ src/app/api/user/route.ts
import { NextRequest, NextResponse } from "next/server";
import dbConnect from "@/lib/dbConnect";
import UserModel from "@/models/UserModel";
import HeroModel from "@/models/HeroModel";
import ArmyModel from "@/models/ArmyModel";
import MissionModel from "@/models/MissionModel";
import ShipModel from "@/models/ShipModel";
import ResourceNodeModel from "@/models/ResourceNodeModel";

// –ü–æ–ª—É—á–µ–Ω–∏–µ/—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–ø–æ wallet, id –∏–ª–∏ —Ç–æ–∫–µ–Ω—É)
export async function POST(req: NextRequest) {
  await dbConnect();
  try {
    const { userId, wallet, token, telegram } = await req.json();

    let user;
    if (userId) {
      user = await UserModel.findById(userId);
    } else if (wallet) {
      user = await UserModel.findOne({ wallet });
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram, –µ—Å–ª–∏ –µ—Å—Ç—å
      if (!user) {
        user = new UserModel({
          wallet,
          name: telegram?.first_name || "",
          avatar: telegram?.photo_url || "",
          telegram_username: telegram?.username || "",
          // –¥—Ä—É–≥–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–æ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, prestige, createdAt –∏ —Ç.–¥.)
        });
        await user.save();
      }
    } else if (token) {
      return NextResponse.json({ error: "Auth by token –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω" }, { status: 400 });
    } else {
      return NextResponse.json({ error: "–ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" }, { status: 400 });
    }

    // –î–æ—Å—Ç–∞—ë–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≥–µ—Ä–æ–∏, –∞—Ä–º–∏—è, –º–∏—Å—Å–∏–∏, –∫–æ—Ä–∞–±–ª—å, —Ä–µ—Å—É—Ä—Å—ã)
    const [heroes, army, missions, ship, resourceNodes] = await Promise.all([
      HeroModel.find({ owner: user._id }),
      ArmyModel.findOne({ owner: user._id }),
      MissionModel.find({ owner: user._id }),
      ShipModel.findOne({ owner: user._id }),
      ResourceNodeModel.find({ owner: user._id }),
    ]);

    return NextResponse.json({
      user,
      heroes,
      army,
      missions,
      ship,
      resourceNodes,
    });
  } catch (error) {
    return NextResponse.json({ error: "Server error", details: `${error}` }, { status: 500 });
  }
}
