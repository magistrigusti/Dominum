// üìÑ components/Islands/StartIsland/StartIsland.tsx
'use client';

import { useMemo, useState } from 'react';
import styles from './StartIsland.module.css';
import { RESOURCE_CONFIG, type ResourceType } from '@/constants/resources';
import { ResourcePoint } from '@/components/Resources/ResourcePoint/ResourcePoint';
import { IslandMapController } from '@/components/Map/IslandMapController/IslandMapController';
// import { HeroesBar } from '@/components/Map/HeroesBar/HeroesBar';
import { generateResourceNodes } from '@/utils/generateResourceNodes';
import { ResourceNodeModal } from '@/components/Resources/ResourceNodeModal/ResourceNodeModal';
import { ModalHerosGo } from '@/components/Heroes/ModalHerosGo/ModalHerosGo';
import { Hero } from '@/types/heroes'; // ‚úÖ —Ñ–∏–∫—Å –æ—à–∏–±–∫–∏ —Å —Ç–∏–ø–æ–º

const RESOURCE_TYPES = ['food', 'wood', 'stone', 'iron', 'gold'] as const;

// üîß –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–ø—Å–æ–≤
interface StartIslandProps {
  onOpenNode?: (nodeId: string) => void;
}

// üîß –º–æ–∫ –≥–µ—Ä–æ–µ–≤ (–ø–æ–∫–∞ –Ω–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞)
const mockHeroes: Hero[] = [
  {
    id: 'hero-1',
    name: '–õ–∏–Ω–¥–∏',
    level: 3,
    quality: 'rare',
    armyPower: 2500,
    avatar: '/images/heroes/lindi.png',
    image: '/images/heroes/oygen.png',
    exp: 0,
    expToNext: 1000,
  },
  {
    id: 'hero-2',
    name: '–û–π–≥–µ–Ω',
    level: 4,
    quality: 'epic',
    armyPower: 3100,
    avatar: '/images/heroes/oygen.png',
    image: '/images/heroes/oygen.png',
    exp: 0,
    expToNext: 1000,
  },
];

// üß† –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Å—Ç—Ä–æ–≤–∞
export const StartIsland = ({ onOpenNode }: StartIslandProps) => {
  const [activeNode, setActiveNode] = useState<string | null>(null); // –æ—Ç–∫—Ä—ã—Ç–∞—è —Ç–æ—á–∫–∞
  const [isHeroModalOpen, setHeroModalOpen] = useState(false); // –º–æ–¥–∞–ª–∫–∞ –≥–µ—Ä–æ–µ–≤
  const [selectedNodeId, setSelectedNodeId] = useState<string | null>(null); // id —Ç–æ—á–∫–∏ –¥–ª—è –≥–µ—Ä–æ–µ–≤

  // üé≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—á–µ–∫
  const points = useMemo(() =>
    generateResourceNodes(5, {
      width: 550,
      height: 450,
      offsetX: 120,
      offsetY: 250,
    }, RESOURCE_TYPES.slice()), []
  );

  // üí° –∫–ª–∏–∫ "–°–æ–±—Ä–∞—Ç—å" ‚Üí –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –≥–µ—Ä–æ–µ–≤
  const handleCollectClick = () => {
    setHeroModalOpen(true);
    setSelectedNodeId(activeNode);
    setActiveNode(null); // –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Ä–µ—Å—É—Ä—Å–∞
  };

  return (
    <div className={styles.map_wrapper}>
      <IslandMapController>
        <div className={styles.map_image}>
          {/* –∏–∫–æ–Ω–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ */}
          {points.map((node) => (
            <ResourcePoint
              key={node.id}
              icon={node.icon}
              x={node.x}
              y={node.y}
              onClick={() => {
                setActiveNode(node.id);
                onOpenNode?.(node.id);
              }}
            />
          ))}

          {/* –º–æ–¥–∞–ª–∫–∞ —Ä–µ—Å—É—Ä—Å–∞ */}
          {activeNode && (
            <ResourceNodeModal
              resource={points.find(p => p.id === activeNode)!.resource}
              total={100}
              remaining={60}
              onCollect={handleCollectClick}
              onClose={() => setActiveNode(null)}
            />
          )}
        </div>
      </IslandMapController>

      {isHeroModalOpen && (
        <ModalHerosGo
          onClose={() => setHeroModalOpen(false)}
          onConfirm={(heroId, armyCount) => {
            console.log(`–ì–µ—Ä–æ–π ${heroId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${selectedNodeId} —Å –≤–æ–π—Å–∫–æ–º: ${armyCount}`);
            setHeroModalOpen(false);
            setSelectedNodeId(null);
          }}
          heroes={mockHeroes}
        />
      )}
    </div>
  );
};
